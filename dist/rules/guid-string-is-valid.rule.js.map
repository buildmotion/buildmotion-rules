{"version":3,"sources":["../../src/app/rules/guid-string-is-valid.rule.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,kCAAkC,CAAC;AAC1D,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAA;AAChE,OAAO,EAAE,uBAAuB,EAAE,MAAM,+BAA+B,CAAA;AAEvE;IAA2C,yCAAa;IAEpD,+BACI,IAAY,EACZ,OAAe,EACP,MAAc,EACtB,aAAsB;QAJ1B,YAMI,kBAAM,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,SAEtC;QALW,YAAM,GAAN,MAAM,CAAQ;QAItB,KAAI,CAAC,cAAc,EAAE,CAAC;;IAC1B,CAAC;IAED,8CAAc,GAAd;QACI,IAAM,kBAAkB,GAAY,IAAI,CAAC;QACzC,IAAM,sBAAsB,GAAY,KAAK,CAAC;QAE9C,IAAM,UAAU,GAAG,EAAE,CAAC,CAAC,uBAAuB;QAC9C,IAAM,cAAc,GAAG,iEAAiE,CAAC,CAAC,4BAA4B;QAEtH,2CAA2C;QAC3C,IAAI,CAAC,KAAK,CAAC,IAAI,CACX,IAAI,KAAK,CAAC,oBAAoB,CAC1B,gCAAgC,EAC9B,wCAAwC,EACxC,IAAI,CAAC,MAAM,EACX,sBAAsB,CAC3B,CACJ,CAAC;QACF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,KAAK,CAAC,IAAI,CACX,IAAI,KAAK,CAAC,QAAQ,CACd,yBAAyB,EACvB,8CAA8C,EAC9C,IAAI,CAAC,MAAM,CAAC,MAAM,EAClB,UAAU,EACV,sBAAsB,CAC3B,CACJ,CAAC;YACF,IAAI,CAAC,KAAK,CAAC,IAAI,CACX,IAAI,uBAAuB,CACvB,aAAa,EACX,uCAAuC,EACvC,IAAI,CAAC,MAAM,EACX,cAAc,EACd,sBAAsB,CAC3B,CACJ,CAAC;QACN,CAAC;IACL,CAAC;IACL,4BAAC;AAAD,CAjDA,AAiDC,CAjD0C,aAAa,GAiDvD","file":"guid-string-is-valid.rule.js","sourceRoot":"","sourcesContent":["import * as rules from 'angular-rules-engine/rules/index';\r\nimport { CompositeRule } from 'angular-rules-engine/rules/index'\r\nimport { StringIsRegExpMatchRule } from './string-is-regexp-match.rule'\r\n\r\nexport class GuidStringIsValidRule extends CompositeRule {\r\n\r\n    constructor(\r\n        name: string,\r\n        message: string,\r\n        private target: string,\r\n        isDisplayable: boolean\r\n    ) {\r\n        super(name, message, isDisplayable);\r\n        this.configureRules();\r\n    }\r\n\r\n    configureRules() {\r\n        const showRuleViolations: boolean = true;\r\n        const doNotShowRuleViolation: boolean = false;\r\n\r\n        const guidLength = 36; // Length with hyphens.\r\n        const guidExpression = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i; // Guid RegExp (with hypens)\r\n\r\n        // determine if the target is a valid guid;\r\n        this.rules.push(\r\n            new rules.IsNotNullOrUndefined(\r\n                'GuidStringIsNotNullOrUndefined'\r\n                , 'The target value is null or undefined.'\r\n                , this.target\r\n                , doNotShowRuleViolation\r\n            )\r\n        );\r\n        if (this.target) {\r\n            this.rules.push(\r\n                new rules.AreEqual(\r\n                    'GuidStringLengthIsValid'\r\n                    , 'The length of the target value is not valid.'\r\n                    , this.target.length\r\n                    , guidLength\r\n                    , doNotShowRuleViolation\r\n                )\r\n            );\r\n            this.rules.push(\r\n                new StringIsRegExpMatchRule(\r\n                    'GuidIsValid'\r\n                    , 'The target value is not a valid guid.'\r\n                    , this.target\r\n                    , guidExpression\r\n                    , doNotShowRuleViolation\r\n                )\r\n            );\r\n        }\r\n    }\r\n}\r\n"]}