{"version":3,"file":"date-is-greater.rule.js","sourceRoot":"","sources":["../../src/app/rules/date-is-greater.rule.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,kCAAkC,CAAC;AAC1D,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAA;AAEhE,2BAA2B;AAC3B,OAAO,EAAE,QAAQ,EAAE,MAAM,iDAAiD,CAAC;AAG3E,6GAA6G;AAE7G;;GAEG;AACH;IAAuC,qCAAa;IAIhD,2BACI,IAAY,EACZ,OAAe,EACP,UAAgB,EAChB,cAAoB,EAC5B,aAAsB;QAL1B,YAOI,kBAAM,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,SAEtC;QANW,gBAAU,GAAV,UAAU,CAAM;QAChB,oBAAc,GAAd,cAAc,CAAM;QAI5B,KAAI,CAAC,cAAc,EAAE,CAAC;;IAC1B,CAAC;IAED,0CAAc,GAAd;QACI,IAAM,kBAAkB,GAAY,IAAI,CAAC;QACzC,IAAM,sBAAsB,GAAY,KAAK,CAAC;QAG9C,kEAAkE;QAClE,IAAI,CAAC,KAAK,CAAC,IAAI,CACX,IAAI,KAAK,CAAC,oBAAoB,CAC1B,0BAA0B,EAC1B,wCAAwC,EACxC,IAAI,CAAC,UAAU,EACf,sBAAsB,CACzB,CACJ,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,IAAI,CACX,IAAI,KAAK,CAAC,oBAAoB,CAC1B,0BAA0B,EAC1B,wCAAwC,EACxC,IAAI,CAAC,cAAc,EACnB,sBAAsB,CACzB,CACJ,CAAC;QAEF,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YAEzC,IAAI,CAAC,mBAAmB,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/E,IAAI,CAAC,uBAAuB,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC;YAC3E,IAAI,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACrF,qCAAqC;YAErC,IAAI,CAAC,KAAK,CAAC,IAAI,CACX,IAAI,KAAK,CAAC,MAAM,CACZ,uCAAuC,EACvC,0DAA0D,EAC1D,aAAa,IAAI,CAAC,EAClB,sBAAsB,CACzB,CACJ,CAAC;QACN,CAAC;IAEL,CAAC;IAEL,wBAAC;AAAD,CAAC,AAzDD,CAAuC,aAAa,GAyDnD","sourcesContent":["import * as rules from 'angular-rules-engine/rules/index';\r\nimport { CompositeRule } from 'angular-rules-engine/rules/index'\r\n\r\n// awesome dot-net package;\r\nimport { DateTime } from 'typescript-dotnet-commonjs/System/Time/DateTime';\r\nimport { TimeSpan } from 'typescript-dotnet-commonjs/System/Time/TimeSpan';\r\n\r\n// use to verify that targetDate (maximum date allowed) is greater than (after) comparisonDate (date entered)\r\n\r\n/**\r\n * Use to verify that the target date (maximum date allowed) is greater than (after) the comparison date (date entered).\r\n */\r\nexport class DateIsGreaterRule extends CompositeRule {\r\n    convertedTargetDate: DateTime;\r\n    convertedComparisonDate: DateTime;\r\n\r\n    constructor(\r\n        name: string,\r\n        message: string,\r\n        private targetDate: Date,\r\n        private comparisonDate: Date,\r\n        isDisplayable: boolean\r\n    ) {\r\n        super(name, message, isDisplayable);\r\n        this.configureRules();\r\n    }\r\n\r\n    configureRules() {\r\n        const showRuleViolations: boolean = true;\r\n        const doNotShowRuleViolation: boolean = false;\r\n\r\n\r\n        // determine if the target and comparison dates are valid objects;\r\n        this.rules.push(\r\n            new rules.IsNotNullOrUndefined(\r\n                `DateIsNotNullOrUndefined`,\r\n                `The target value is null or undefined.`,\r\n                this.targetDate,\r\n                doNotShowRuleViolation\r\n            )\r\n        );\r\n        this.rules.push(\r\n            new rules.IsNotNullOrUndefined(\r\n                `DateIsNotNullOrUndefined`,\r\n                `The target value is null or undefined.`,\r\n                this.comparisonDate,\r\n                doNotShowRuleViolation\r\n            )\r\n        );\r\n\r\n        if (this.targetDate && this.comparisonDate) {\r\n\r\n            this.convertedTargetDate = new DateTime(this.targetDate.getTime()).addHours(2);\r\n            this.convertedComparisonDate = new DateTime(this.comparisonDate.getTime());\r\n            let compareResult = this.convertedTargetDate.compareTo(this.convertedComparisonDate);\r\n            // let compareResult = Math.random();\r\n\r\n            this.rules.push(\r\n                new rules.IsTrue(\r\n                    'TargetDateIsGreaterThanComparisonDate',\r\n                    'The target date is not greater than the comparison date.',\r\n                    compareResult >= 0,\r\n                    doNotShowRuleViolation\r\n                )\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n}"]}